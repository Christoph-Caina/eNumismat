<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAGBgAAAEACADIBgAAJgAAABgYAAABACAAiAkAAO4GAAAoAAAAGAAAADAAAAABAAgAAAAAAKAC
        AAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZmcwAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAZmbMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADMz
        mQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGYAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/Pz9AE1NtwAAAJgAAACXAAAA
        ZwAAAJUAAQGZAAEBhwABAWoAAQFoAAMDmgACAm0ABQWZAAQEeQAHB5sABQVsAAgIbQANDZwADg6PABcX
        kQAUFH4AGhqiABoanAAmJqcALS2qACkplgA2Nq0APj6wAEVFtABLS7YAR0emAFdXuQB8fMoAo6PaAL29
        5ADf3/IA7+/4APj4/AD9/f0A////AAAAAAAAAAAAAOHn6Ojn4QAAAAAAAAAAAAAAAAAAANzn7PH29/f2
        8ezn3AAAAAAAAAAAAAAA4OXu8PX6+/v69/Du5eAAAAAAAAAAAADg3+Tm5vj92Nj9+enm5N/gAAAAAAAA
        AODf29ve3jn92Nj9Mube29vf4AAAAAAA4N/b29pra+0y+/v572tr2tvb3+AAAACP5d3b2tpr2mvm7e3p
        3mva2tvb3eWPAADg39vb2traa2vi5ubia2tr29rb29/gAADl3dvaa9pra97vMjLw3mtr2tra293lAI/f
        29pra9pr3uL4/f0y5N5r2tpr2tvfj9zf2tpr4unt7fD62Nj68O3t6eRr2trf3ODf4u3w9Nn39zn72Nj7
        Off32fTw7eLf3ODq8tn39/f39zn72Nj8+Pf39/f32fLq4OFk9fXZ2dnZ2Tn82Nj9+NnZ2dnZ9fVk4eHx
        9PT09PT09Dn8/v79+PT09PT09PTx4QDs8vPz8/Pz8/j9/v7YMvPz8/Pz8/LsAADn8fLy8vLy8vj9/v7Y
        +fLy8vLy8vHnAADc7PDw8PDw8PjY/tjY+fLw8PDw8OzcAAAA4Ovv7+/v7zLY/v7Y+vDv7+/v6+AAAAAA
        AOPr7e3t7TLY2P7Y+u/t7e3r4wAAAAAAAADj6u7t7fj92NjYMu3t7urjAAAAAAAAAAAA4OXq6fD6/Pz7
        9enq5eAAAAAAAAAAAAAAANzg5d/r8/bx3+Xg3AAAAAAAAAAAAAAAAAAAANzh4ODg4QAAAAAAAAAAAP+B
        /wD8AD8A+AAfAPAADwDgAAcAwAADAIAAAQCAAAEAgAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAA
        AQCAAAEAgAABAMAAAwDgAAcA8AAPAPgAHwD8AD8A/4H/ACgAAAAYAAAAMAAAAAEAIAAAAAAAYAkAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmAQEBbAIFBXIGAQFnKgAAZ24CAmesBQVq0ggI
        bN0ICG3eBQVq0gICaKwAAGduAQFoKgUFcgYBAWwCAABmAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAGYBAABsAwAAaCUAAGeJBgZt2xYWfvksLJP+RESk/lpasP1cXLH+R0em/S0tk/4WFn75BgZt2wAA
        Z4kAAGglAABsAwAAZgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZQEAAGoGAABnTwAAaswKCn35Hx+Z/Cws
        p/1KSrX+s7Pg/uTk8/3m5vT+xcXn/VxcvP4sLKj9Hx+Z/AoKffkAAGrMAABnTgAAagYAAGUBAAAAAAAA
        AAAAAAAAAAAAAAAAaQYAAGZhAABs4wEBhfsFBZj8CAib/QgIm/51dcf+9/f7/vv7/f77+/3/+fn8/p6e
        1/4NDZ3+CAib/gUFmPwBAYX7AABs4wAAZmEAAGkGAAAAAAAAAAAAAAAAAABrAwAAZk8AAGzjAACJ+wAA
        l/0AAJf+AQGY/QEBmf5qasP/9fX7//v7/f37+/3/+fn8/ZWV1P8GBpv+AQGY/gAAl/0AAJf9AACJ+wAA
        bOMAAGZPAABrAwAAAAAAAGoBAABnJQAAacwAAIX7AACX/QAAl/4AAJj+AACZ/gAAmf8WFqH/jo7R/9XV
        7f7Z2e//o6Pa/igoqP8AAJn/AACZ/gAAmP0AAJf+AACX/QAAhfsAAGnMAABnJQAAagEAAG4GAABmiQAA
        ePkAAJX8AACX/gAAmP4AAJj+AACZ/QAAmP8AAJn/Bweb/xoaov0bG6P/Cgqc/QEBmf8AAJn/AACY/wAA
        mP0AAJf+AACX/QAAlfwAAHj5AABmiQAAbgYAAGcqAABq2wAAjPwAAJf9AACX/gAAmP4AAJj+AACY/QAA
        mf4AAJn+AgKa/gcHmv0HB5r+AgKa/QAAmf4AAJn+AACZ/gAAl/0AAJj+AACX/QAAl/0AAIz8AABq2wAA
        ZyoAAGZuAAB1+QAAlf0AAJf+AACY/gAAmf8AAJj/AACZ/gAAmf8BAZn/KCio/5eX1f6YmNX/LCyq/gEB
        mf8AAJn/AACZ/wAAmP4AAJj/AACY/gAAl/4AAJX9AAB1+gAAZm4AAGatAACB/QAAl/0AAJj+AACZ/wAA
        mf8AAJj/AACZ/QEBmf8DA5r/iYnP//j4+/34+Pv/k5PT/QUFmv8BAZn/AACZ/wAAmP0AAJj/AACZ/QAA
        mP4AAJf9AACB/gAAZqwAAGfSAACJ/QAAmP0AAJj+AACZ/wQEmv8LC5z/FRWh/R4epP8vL6v/wsLm//r6
        /f36+v3/y8vq/TExrP8eHqT/FRWh/wsLnf0EBJn/AACZ/QAAmP4AAJj9AACJ/gAAZ9IAAGngAACM/QMD
        mf0UFKD+LCyq/kJCsv5PT7f+Vla7/VtbvP5oaMH+4ODy/vz8/f38/P3+5eX0/W1txP5bW7z+Vla7/k9P
        uP1CQrL+LCyq/RQUoP4DA5n9AACL/gAAaN4AAGngDg6S/TU1rf1NTbf/VFS5/1VVuv9UVLr/VVW6/VZW
        uv9qasL/5ub1//z8/f38/P3/7e33/XJyxv9WVrr/VVW6/1RUuv1UVLr/VFS5/U1Nt/81Na39Dg6R/wAA
        ad4BAWjSMDCc/UxMtv1MTLb+TU23/k1Nt/5NTbf+TU23/U9Pt/5sbMP+7Oz3/vz8/f38/P3+9fX6/Xl5
        yP5PT7f+TU23/k1Nt/1NTbf+TU23/UxMtv5MTLb9MDCc/gEBaNIBAWetJSWQ/UREs/1FRbP+Rka0/0ZG
        tP9FRbT/Rka0/UdHtP9vb8X/8/P6//39/v39/f3/+fn8/YODzP9HR7T/Rka0/0VFtP1FRbT/Rka0/UVF
        s/5ERLP9JSWQ/gEBZ6wAAGZuExN9+To6rf09PbD+PT2w/j4+sf89PbD/Pj6x/T8/sf90dMf/9/f7//39
        /v39/f3/+/v9/ZCQ0v8/P7H/Pz+x/z09sf09PbD/PT2w/T09sP46Oq39ExN9+gAAZm4BAWgqBQVt2yoq
        nfw1Na39NTWt/jY2rv41Na3/Njau/Tc3rv98fMr/+fn8//39/v39/f3//Pz9/Z+f2P83N67/Nzeu/zY2
        rf01Na3+NTWt/TU1rf0qKp38BQVt2wEBaCoHB3EGAABniRISf/krK6f8LS2p/i0tqv4uLqr+Ly+r/S8v
        q/6Hh87++vr9/v39/f38/P3+/Pz9/a2t3f4zM6z+Ly+r/i4uq/0tLar+LS2p/Ssrp/wSEn/5AABniQcH
        cQYDA2wBAQFoJQICaswYGI77JSWm/SUlpv4lJaf+Jyen/Scnp/+Pj9L/+/v9//39/v39/f3//Pz9/bq6
        4/8tLar/Jyen/iYmp/0lJab+JSWm/RgYjvsCAmrMAQFoJQMDbAEAAAAAAwNsAwAAZ08DA27kFRWS+x0d
        ov0dHaP+Hx+k/R8fpP6SktP+/Pz9/vz8/f39/f3+/Pz9/bi44v4mJqf+Hx+k/h4eo/0dHaL9FRWS+wMD
        buMAAGdPAwNsAwAAAAAAAAAAAAAAAAICagYAAGdiAwNt4w4Oi/sVFZ78Fxeh/RcXof58fMr++Pj8/vv7
        /f37+/3/+/v8/ZmZ1f4aGqL+Fxeh/hUVnvwODov7AwNt4wAAZ2ECAmoGAAAAAAAAAAAAAAAAAAAAAAAA
        ZQEBAWoGAABnTwEBaswGBnv5DAyR/A8PnP0vL6v+tbXh/u3t9/3y8vn+1tbu/UpKtv4PD5z9DQ2S/AYG
        e/kBAWrMAABnTwEBagYAAGYBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGYBAwNtAwEBaCUAAGeJAQFr2wMD
        d/kGBoP+FxeT/j4+pf5JSan/KCiZ/ggIhP4DA3f5AQFr2wAAZ4kBAWglAwNtAwAAZgEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAABmAQEBbAIDA3EGAABnKgAAZ24AAGetAgJo0gICauACAmrgAgJp0gEB
        Z60AAGduAABnKgMDcQYBAWwCAABmAQAAAAAAAAAAAAAAAAAAAADwAA8A4AAHAMAAAwDAAAMAgAABAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAABAMAA
        AwDAAAMA4AAHAPAADwA=
</value>
  </data>
</root>